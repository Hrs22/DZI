1.Предназначението и работа с дебъгер
Дебъгерът е инструмент, който се използва за отстраняване на грешки в програмен код.
Работата с дебъгер може да бъде много полезна при разработване на софтуер, особено при отстраняване на сложни грешки.
Ето няколко основни стъпки за работа с дебъгер:Настройте дебъгера: Преди да започнете да използвате дебъгера, трябва да го настроите правилно за средата, в която работите.
Това включва настройка на конфигурацията, задаване на точки за прекъсване, настройка на условия за прекъсване и т.н.
Започнете да дебъгвате: Започнете програмата си в дебъгер режим и следвайте изпълнението на кода една стъпка по време, за да видите как се изпълняват различните команди.
Анализирайте стойностите: Анализирайте стойностите на променливите, за да видите дали се изпълнява програмата ви така, както сте я очаквали. Използвайте дебъгера, за да изследвате проблемите в
кода си и за да видите как се променят стойностите на променливите по време на изпълнението на програмата.
Коригирайте грешките: Когато откриете грешка, използвайте дебъгера, за да коригирате кода си. Променете кода си и изпълнете го отново в дебъгер режим, за да видите дали сте отстранени проблема.
Когато отстраните проблемите в кода си, тествайте го, за да се уверите, че програмата ви работи както трябва.
2.Коректно рефакторира и модифицира зле написан код, който нарушава добрите практики и стилови ръководства.
Рефакторирането на код е процес на подобряване на качеството на съществуващ код чрез промяна на неговата структура, 
без да се променя функционалността му. Това може да се постигне чрез различни техники и подходи. 
3.За да създадем компонентни тестове на предварително предоставен код, трябва да следваме няколко стъпки:
Анализ на кода: Първата стъпка е да анализираме предоставения код и да разберем какво прави и какви са очакваните резултати. Това ни позволява да идентифицираме ключовите компоненти на системата, които трябва да бъдат тествани.
Избор на тестови случаи: След като сме идентифицирали ключовите компоненти на системата, трябва да изберем тестовите случаи, които да тестваме. Трябва да създадем тестове, които да покриват всички възможни
сценарии на използване на системата и да гарантират, че тя работи правилно във всички ситуации.
Създаване на тестове: След като сме избрали тестовите случаи, трябва да създадем тестове за тях. Тези тестове трябва да проверят очакваните резултати и да гарантират, че системата работи коректно.
Изпълнение на тестовете: След като сме създали тестовете, трябва да ги изпълним, за да видим дали системата работи правилно. Трябва да се уверим, че всички тестове минават успешно и че няма грешки в системата.
Отстраняване на грешки: Ако има грешки в системата, трябва да ги отстраним и да решим проблема, за да гарантираме, че системата работи правилно.
4.Дефинира и различава понятията интегрирана среда за разработка (IDE) и текстов редактор.
Интегрирана среда за разработка (IDE) и текстов редактор са два различни инструмента за разработка на софтуер, които имат свои характеристики и предназначения.
IDE е платформа за разработка на софтуер, която предоставя на разработчиците цялостна среда за разработка на приложения. Това включва функционалности като средства за управление на изходния код, инструменти за дебъгване, интегрирани компилатори и средства за тестване. IDE обикновено има графичен потребителски интерфейс (GUI), който позволява на разработчиците да работят с различни файлови формати и програмни езици.
От друга страна, текстовият редактор е инструмент за редактиране на текстови файлове. Текстовият редактор не предлага интегрирани средства за управление на изходния код или дебъгване, но предоставя прост и лесен начин за редактиране на кода. Текстовите редактори могат да бъдат по-леки и бързи от IDE, което ги прави предпочитани за някои програмисти, особено за по-малки проекти.
Основната разлика между IDE и текстов редактор е, че IDE е цялостна среда за разработка, която предоставя на програмистите интегрирани функционалности за разработка на приложения, докато текстовият редактор предоставя основни функционалности за редактиране на текст. IDE може да бъде по-мощен и по-функционален, но текстовият редактор е по-лек и по-бърз за малки проекти.
5.IDE Keyboard Shortcuts.
Описва и демонстрира инструменти и клавишни комбинации за работа с код
(бързо навигиране в кода, намиране на срещания и замяна, извличане – extract
На методи и класове и др.) в интегрирана среда за разработка и текстов редак-
Интегрираните среди за разработка (IDE) и текстови редактори предоставят множество инструменти и клавишни комбинации, които могат да ускорят работата върху кода. Някои от тези инструменти и клавишни комбинации варират в зависимост от избрания инструмент или редактор, но общите принципи и функционалности са подобни.
Ето някои от най-полезните инструменти и клавишни комбинации за работа с код:
Бързо навигиране в кода:
Ctrl + F (или Cmd + F за Mac): търсене на текст в текущия файл
Ctrl + Shift + F (или Cmd + Shift + F за Mac): търсене на текст във всички файлове в проекта
Ctrl + G (или Cmd + G за Mac): преминаване към определен ред в текущия файл
Ctrl + Shift + G (или Cmd + Shift + G за Mac): преминаване към определен ред в друг файл
Намиране на срещания и замяна:
Ctrl + D (или Cmd + D за Mac): избиране на следващото съвпадение на текущо маркираното изразение
Ctrl + Shift + D (или Cmd + Shift + D за Mac): избиране на всички съвпадения на текущо маркираното изразение
Ctrl + R (или Cmd + R за Mac): замяна на текущо маркираното изразение с друго
Ctrl + Shift + R (или Cmd + Shift + R за Mac): замяна на всички съвпадения на текущо маркираното изразение с друго
Извличане (Extract) на методи и класове:
Ctrl + Alt + M (или Cmd + Option + M за Mac): извличане на маркираното блокче код в нов метод
Ctrl + Alt + V (или Cmd + Option + V за Mac): извличане на маркираното блокче код в нова променлива
Ctrl + Alt + F (или Cmd + Option + F за Mac): извличане на маркираното блокче код в ново поле
Ctrl + Alt + C (или Cmd + Option + C за Mac): извличане на маркираното блокче код в нов клас
Други полезни клавишни комбинации:
Ctrl + Space (или Ctrl + Shift + Space за Mac): автоматично довършване на кода
Ctrl + Shift + T (или Cmd + Shift + T за Mac): отваряне на клас или метод по име.
6.6.Инструментите за работа със сорс-контрол система (Source Control Management tools) в интегрираните среди за разработка (IDE) и текстови редактори предоставят удобен начин за управление на кода и съхранението му във версионен контрол. Някои от най-популярните сорс-контрол системи включват Git, SVN и Mercurial.
Ето някои от инструментите и примерите за тяхната употреба в IDE и текстови редактори:
Git:
Интегриране на Git във Visual Studio Code: Въвеждане на Git във Visual Studio Code позволява на разработчиците да добавят, изтриват, модифицират и споделят код вреално време.
В VS Code, инструментът за Git може да бъде намерен вляво от редактора.
От там може да се използват всички Git команди като commit, push, pull, и много други.
Интегриране на Git в IntelliJ IDEA: IntelliJ IDEA предоставя мощен инструментариум за работа с Git, който включва удобна графична обвивка на Git-а. Разработчиците могат да работят с Git през контекстно меню или чрез специални клавишни комбинации, за да направят commit, push, pull, и много други.